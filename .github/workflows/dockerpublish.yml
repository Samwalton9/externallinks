name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - staging

  # Run tests for any PRs.
  pull_request:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build and Start Image
        run: |
          cp template.env .env
          docker-compose up -d --build
      - name: Run tests
        run: |
          docker-compose exec -T externallinks /django_wait_for_db.sh python django_wait_for_migrations.py test
      - name: Save externallinks image
        run: |
          docker save wikipedialibrary/externallinks:latest | gzip > externallinks.tar.gz
      - name: upload externallinks image
        uses: actions/upload-artifact@v2
        with:
          name: externallinks
          path: externallinks.tar.gz
      - name: Save eventstream image
        run: |
          docker save wikipedialibrary/eventstream:latest | gzip > eventstream.tar.gz
      - name: upload eventstream image
        uses: actions/upload-artifact@v2
        with:
          name: eventstream
          path: eventstream.tar.gz

# Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Download externallinks image
        uses: actions/download-artifact@v2
        with:
          name: externallinks

      - name: Load externallinks image
        run: docker load -i externallinks.tar.gz

      - name: Download eventstream image
        uses: actions/download-artifact@v2
        with:
          name: eventstream

      - name: Load eventstream image
        run: docker load -i eventstream.tar.gz

      - name: Log into Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Set branch tag
        id: branch_tag
        run: |
          # Strip git ref prefix from version
          branch_tag=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && branch_tag=$(echo $branch_tag | sed -e 's/^v//')

          # preprend with "branch_" so we know what the tag means by looking at it.
          branch_tag="branch_${branch_tag}"

          echo ::set-output name=value::$(echo $branch_tag)

      - name: Set commit tag
        id: commit_tag
        run: |
          # The short git commit object name.
          commit_tag=${GITHUB_SHA::8}

          # prepend with "commit_" so we know what the tag means by looking at it.
          commit_tag="commit_${commit_tag}"

          echo ::set-output name=value::$(echo $commit_tag)

      - name: Push externallinks image
        run: |
          # The image name represents both the local image name and the remote image repository.
          image_name=wikipedialibrary/externallinks
          branch_tag=${{ steps.branch_tag.value }}
          commit_tag=${{ steps.commit_tag.value }}

          docker tag ${image_name}:latest ${image_name}:${branch_tag}
          docker tag ${image_name}:latest ${image_name}:${commit_tag}
          docker push ${image_name}:${branch_tag}
          docker push ${image_name}:${commit_tag}

      - name: Push eventstream image
        run: |
          # The image name represents both the local image name and the remote image repository.
          image_name=wikipedialibrary/eventstream
          branch_tag=${{ steps.branch_tag.value }}
          commit_tag=${{ steps.commit_tag.value }}

          docker tag ${image_name}:latest ${image_name}:${branch_tag}
          docker tag ${image_name}:latest ${image_name}:${commit_tag}
          docker push ${image_name}:${branch_tag}
          docker push ${image_name}:${commit_tag}

      - name: Delete images from github
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
              externallinks
              eventstream
